"2: ",tpar2, "\n 4: ", tpar4, "\n 6: ", tpar6, "\n 8: ", tpar8, "\n 10: ", tpar10)
print("SECUENCIAL", tsec1)
tsec1
tsec1
tpar2
tpar4
tpar6
tpar8
tpar10
type(tsec1)
str(tsec1)
tsec1$user.self
tsec1.user.self
tsec1[.user.self]
tsec1[user.self]
tsec1[1]
cbind(tsec1, tpar2)
cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
times <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
plot(times)
ggplot(data=times, mapping = aes(x=user.self, y =tsec1))
ggplot(data=times)
str(times)
View(times)
ggplot(data=times)
ggplot(times)
str(times)
times <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
comptimes <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
str(comptimes)
ggplot(times)
plot(times)
comptimes <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
str(comptimes)
comptimes
comptimes <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10).T
comptimes <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)))
str(comptimes)
View(comptimes)
setDT(comptimes, keep.rownames = TRUE)[]
comptimes <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6,
tpar8, tpar10)))
setDT(comptimes, keep.rownames = TRUE)[]
df <- tibble::rownames_to_column(comptimes, "VALUE")
tiempos <- tibble::rownames_to_column(comptimes, "VALUE")
View(tiempos)
View(tiempos)
tiempos <- tibble::rownames_to_column(comptimes, "Tipo")
ggplot(tiempos, )
ggplot(tiempos, aes(x=tipo, y = elapsed))
tiempos <- tibble::rownames_to_column(comptimes, "tipo")
ggplot(tiempos, aes(x=tipo, y = elapsed))
ggplot(tiempos, aes(x=tipo, y = elapsed)) + geom_abline()
ggplot(tiempos) + geom_abline(aes(x=tipo, y = elapsed))
ggplot(tiempos, aes(x=tipo, y = elapsed)) + geom_point()
ggplot(tiempos, aes(x=factor(tipo), y = elapsed)) + geom_point()
library(KEGGREST)
library(stringr)
library(tidyverse)
library(dplyr)
library(purrr)
library(magrittr)
rm(list= ls()
kegg <- function(enzima){
rm(list= ls())
kegg <- function(enzima){
EC_KeggPathways= tryCatch(map(keggGet(enzima), extract, c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL)
return(EC_KeggPathways)
}
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
# Recuperación de información de la base de datos Kegg
tsec1 <- system.time(sec1 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i]))) # elapsed
library(profvis)
profvis( sec2 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i])))
ggplot(tiempos, aes(tipo, elapsed) + geom_bar(stat="identity")
library(parallel)
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
tpar2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
tpar4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
tpar6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
tpar8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
tpar10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
comptimes <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6,
tpar8, tpar10)))
tiempos <- tibble::rownames_to_column(comptimes, "tipo")
ggplot(tiempos, aes(tipo, elapsed) + geom_bar(stat="identity")
tiempos <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6,
tpar8, tpar10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
ggplot(tiempos, aes(tipo, elapsed)) + geom_bar(stat="identity")
View(tiempos)
tiempos$tipo <- factor(tiempos$tipo, levels = c("tsec1", "tpar2", "tpar4", "tpar6", "tpar8", "tpar10"))
ggplot(tiempos, aes(tipo, elapsed)) + geom_bar(stat="identity")
ggplot(tiempos, aes(tipo, c(elapsed, user.self, sys.self))) + geom_bar(stat="identity")
ggplot(tiempos, aes(x=tipo, y=c(elapsed, user.self, sys.self))) + geom_bar(stat="sta")
ggplot(tiempos, aes(x=tipo, y=c(elapsed, user.self, sys.self))) + geom_bar(stat="identity")
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity")
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge())
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=len), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=elapsed), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado (seg) por proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
# Recuperación de información de la base de datos Kegg
secuencial1 <- system.time(sec1 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i]))) # elapsed
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
paralelo2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
paralelo4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
paralelo6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
paralelo8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
paralelo10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
tiempos$tipo <- factor(tiempos$tipo, levels = c("tsec1", "tpar2", "tpar4", "tpar6", "tpar8", "tpar10"))
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado (seg) por proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
tiempos$tipo <- factor(tiempos$tipo, levels = c("secuencial1", "paralelo2", "paralelo4", "paralelo6", "paralelo8", "paralelo10"))
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado (seg) por proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado por tipo de proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
paralelo2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
paralelo4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
paralelo6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
paralelo8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
paralelo10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
tiempos$tipo <- factor(tiempos$tipo, levels = c("secuencial1", "paralelo2", "paralelo4", "paralelo6", "paralelo8", "paralelo10"))
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado por tipo de proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE) # data original
df1 <- df[1:10, ] # data demostrativa
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
enzimas <- unique (EC_records$EC_number)
EC_KeggPathways <- vector("list",length(enzimas))
secuencia.tradicional <- system.time(for(i in 1:length(enzimas)){
KeggPathways[i]=tryCatch(map(keggGet(enzimas[i]), extract,
c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL) })
View(tiempos)
install.packages("rtweet")
library(lubridate)
library(tidyverse)
map_if(1:5, function(x){
x %% 2 == 0
},
function(y){
y^2
}) %>% unlist()
library(purrr)
map_if(1:5, function(x){
x %% 2 == 0
},
function(y){
y^2
}) %>% unlist()
map_if(1:15, function(x){
x %% 2 == 0
},
function(y){
y^2
}) %>% unlist()
map_at(seq(100, 800, 100), c(1, 3, 5:), function(x){
x - 10
}) %>% unlist()
map_at(seq(100, 800, 100), c(1, 3, 5,8), function(x){
x - 10
}) %>% unlist()
map_at(seq(100, 800, 100), c(1, 3, 5,8), function(x){
x / 10
}) %>% unlist()
swirl()
library(swirl)
swirl()
map_chr(c(5, 3, 4), int_to_string)
map_chr(c(1, 3, 4, 5), function(x), x>3)
map_chr(c(1, 3, 4, 5), gt(3))
map_chr(c(1, 3, 4, 5), b =3, gt(b))
map_chr(c(1, 3, 4, 5), gt(x,3))
map_chr(gt(c(1, 3, 4, 5),3))
map_chr(gt(c(1, 3, 4, 5),3), b=3)
map_chr(c(1, 3, 4, 5), gt(), b=3)
map_chr(c(1, 3, 4, 5), gt(a,b), b=3)
map_chr(c(1, 3, 4, 5), gt(x,b=3))
map_chr(c(1, 3, 4, 5), gt(x,b=3))
quit
do
library(parallel)
q
map_lgl(c(1, 2, 3, 4, 5), gt, b = 3)
x
exit
swirl()
library(parallel)
detectCores()
library(doParallel)
detectCores(logit =FALSE)
detectCores(all.tests = FALSE, logical = TRUE)
detectCores(all.tests = FALSE, logical = FALSE)
detectCores(logical = FALSE)
detectCores(logical = TRUE)
detectCores(TRUE)
install.packages("COVID19")
library(covid19)
library(COVID19)
x <- covid19(
country = input$country,
level = input$level,
start = input$date[1],
end = input$date[2]
)
x <- covid19(
country = input$country,
level = input$level,
start = input$date[1],
end = input$date[2])
x <- COVID19(
country = input$country,
level = input$level,
start = input$date[1],
end = input$date[2])
View(is_even)
x <- covid19()
View(x)
x$id=="ECU"
unique(x$id)
install.packages("covid19nytimes")
xec = covid19("ECU")
View(xec)
plot(xec$date, xec$confirmed)
plot(xec$date, log(xec$confirmed))
ggplot2::ggplot(xec$date, log(xec$confirmed))
ggplot(xec$date, log(xec$confirmed))
library(ggplot2)
ggplot(xec$date, log(xec$confirmed))
ggplot(xec$date, log(xec$confirmed))+geom_abline()
geom_abline(xec$date, log(xec$confirmed))
ggplot(xec$date, log(xec$confirmed))
plot(xec$date, log(xec$confirmed))
plot(xec$date, log(xec$confirmed))
View(x)
ggplot(data = x, aes(x= date, y = confirmed))
ggplot(data = x, aes(x= date, y = confirmed)) +geom_abline()
ggplot(data = x, aes(x= date, y = confirmed, color = id)) + geom_abline()
ggplot(x, aes(x= date, y = confirmed, color = id)) + geom_abline()
df <- covid19()
ggplot(df, aes(x= date, y = confirmed, color = id)) + geom_abline()
ggplot(df, aes(x= date, y = confirmed, fill = id)) + geom_abline()
ggplot(df, aes(x= date, y = as.numeric(confirmed), fill = id)) + geom_abline()
ggplot(df, aes(x= date, y = confirmed, fill = id)) + geom_abline()
ggplot(df, aes(x= date, y = confirmed, fill = id)) + geom_dotplot()
df <- covid19()
type(df)
typed(df)
View(df)
str(df)
ggplot(df, aes(x= date, y = confirmed)) + geom_dotplot()
ggscatter(df, aes(x= date, y = confirmed))
ggplot(df, aes(x= date, y = confirmed)) + geom_point()
ggplot(df, aes(x= date, y = confirmed, fill = id)) + geom_point()
ggplot(df, aes(x= date, y = confirmed, fill = id)) + geom_abline()
ggplot(df, aes(y = confirmed, fill = date)) + geom_boxplot()
ggplot(df, aes(confirmed, fill = date)) + geom_boxplot()
ggplot(df, aes(y = confirmed, fill = date)) + geom_boxplot()
ggplot(df, aes(y = confirmed, fill = id)) + geom_boxplot()
ggplot(df, aes(y = log(confirmed), fill = id)) + geom_boxplot()
ggplot(df, aes(x = id, y = log(confirmed))) + geom_boxplot()
install.packages("covoid")
devtools::install_github("cbdrh/covoid",build_vignettes = TRUE)
install.packages("devtools")
x <- data(Boston)
source('~/.active-rstudio-document')
###################################
# Data Professor                   #
# http://youtube.com/dataprofessor #
# http://github.com/dataprofessor  #
####################################
# Importing libraries
library(datasets) # Contains several data sets
library(caret) # Package for machine learning algorithms / CARET stands for Classification And REgression Training
# Importing the dhfr data set
data(dhfr)
# Check to see if there are missing data?
sum(is.na(dhfr))
# To achieve reproducible model; set the random seed number
set.seed(100)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(dhfr$Y, p=0.8, list = FALSE)
TrainingSet <- dhfr[TrainingIndex,] # Training Set
TestingSet <- dhfr[-TrainingIndex,] # Test Set
###############################
# Random forest
# Run normally without parallel processing
start.time <- proc.time()
Model <- train(Y ~ .,
data = TrainingSet, # Build model using training set
method = "rf" # Learning algorithm
)
stop.time <- proc.time()
run.time <- stop.time - start.time
print(run.time)
# Use doParallel
# https://topepo.github.io/caret/parallel-processing.html
library(doParallel)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
start.time <- proc.time()
Model <- train(Y ~ .,
data = TrainingSet, # Build model using training set
method = "rf" # Learning algorithm
)
stop.time <- proc.time()
run.time <- stop.time - start.time
print(run.time)
stopCluster(cl)
##########################
# Run without parallel processing
start.time <- proc.time()
Model <- train(Y ~ .,
data = TrainingSet, # Build model using training set
method = "rf", # Learning algorithm
tuneGrid = data.frame(mtry = seq(5,15, by=5))
)
stop.time <- proc.time()
run.time <- stop.time - start.time
print(run.time)
# Using doParallel
library(doParallel)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)
start.time <- proc.time()
Model <- train(Y ~ .,
data = TrainingSet, # Build model using training set
method = "rf", # Learning algorithm
tuneGrid = data.frame(mtry = seq(5,15, by=5))
)
stop.time <- proc.time()
run.time <- stop.time - start.time
print(run.time)
stopCluster(cl)
##########################
# Apply model for prediction
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
# Model performance (Displays confusion matrix and statistics)
Model.training.confusion <-confusionMatrix(Model.training, TrainingSet$Y)
print(Model.training.confusion)
# Feature importance
Importance <- varImp(Model)
plot(Importance, top = 25)
plot(Importance, col = "red")
View(Model.training.confusion)
View(dhfr)
# Check to see if there are missing data?
sum(is.na(dhfr))
# To achieve reproducible model; set the random seed number
set.seed(100)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(dhfr$Y, p=0.8, list = FALSE)
TrainingSet <- dhfr[TrainingIndex,] # Training Set
TestingSet <- dhfr[-TrainingIndex,] # Test Set
# Run normally without parallel processing
start.time <- proc.time()
Model <- train(Y ~ .,
data = TrainingSet, # Build model using training set
method = "rf" # Learning algorithm
)
stop.time <- proc.time()
Model <- train(Y ~ .,
data = TrainingSet, # Build model using training set
method = "rf" # Learning algorithm
)
print(Model.training.confusion)
setwd("~/Documentos/2020II_R4Biol/PPTs/c5_ImportCSV")
df = read.csv(file = "cancerData1.csv", header = TRUE, sep=",")
df = read.csv(file = "cancerData1.csv", header = TRUE, sep=",")
View(df)
head(g, 4)
g.head(4)
head(g, 4)
df = read.csv(file = "cancerData1.csv", header = TRUE, sep=",")
head(df, 4) # mostrar las 4 primeras filas
tail(df, 4) # mostrar las 4 últimas filas
df[4,] # mostrar la fila 4
df[,4] # mostrar la columna 4
df[3,5] # mostrar la celda en la fila 3 y columna 5
df[1:5,] # mostrar todas las columnas de las filas 1 al 5
df[,2:4] # mostrar todas las filas de las columnas 2 al 4
head(df[,2:5],3)
dim(df) # conocer la dimensiones de la matriz filas * columnas
g[, "age"]
df[, "age"]
df[, "gender"] # seleccionar la columna "gender"
age <- g[, "gender"]
gender <- g[, "gender"]
gender <- df[, "gender"]
type(gender)
str(gender)
gender <- as.factor(gender)
str(gender) # ver el tipo de dato de "gender"
table(gender)
bmi <- df[,"bmi"]
summary(bmi)
summary(df$bmi)
summary(bmi)
summary(df$bmi)
View(df)
table(df[, c("fruit","veg")])
fuirtveg <- df[, c("fruit","veg")]
fruitveg <- df[, c("fruit","veg")]
table(fruitveg)
hist(fruitveg)
df = read.csv(file = "cancerData1.csv", header = TRUE, sep=",")
head(df, 4) # mostrar las 4 primeras filas
tail(df, 4) # mostrar las 4 últimas filas
df[4,] # mostrar la fila 4
df[,4] # mostrar la columna 4
df[3,5] # mostrar la celda en la fila 3 y columna 5
df[1:5,] # mostrar todas las columnas de las filas 1 al 5
df[,2:4] # mostrar todas las filas de las columnas 2 al 4
head(df[,2:5],3) # mostrar las tres primeras filas de las columnas 2 al 5
dim(df) # conocer la dimensiones de la matriz filas * columnas
df[, "gender"] # seleccionar la columna "gender"
gender <- df[, "gender"] # guardar el dato de "gender" en una variable
str(gender) # ver el tipo de dato de "gender"
gender <- as.factor(gender) # dado que el género es masculino o femenino se cambia el tipo de dato a factor
str(gender) # revisar el tipo de dato de "gender"
table
bmi <- df[,"bmi"]
summary(bmi)
summary(df$bmi)
fruitveg <- df[, c("fruit","veg")]
table(fruitveg)
hist(fruitveg)
View(fruitveg)
hist(fruitveg$fruit)
hist(fruitveg$fruit+fruitveg$veg)
hist(fruitveg$fruit)
hist(fruitveg$veg)
hist(fruitveg$fruit+fruitveg$veg)
hist(fruitveg$fruit+fruitveg$veg) # histograma de veces que consumen frutas y vegetales
hist(fruitveg$fruit+fruitveg$veg) # histograma de veces que consumen frutas y vegetales
hist(fruitveg$fruit+fruitveg$veg) # histograma de veces que consumen frutas y vegetales
hist(fruitveg$fruit+fruitveg$veg) # histograma de veces que consumen frutas y vegetales
View(df)
str(df) # tipos de datos de df
df["fruitveg"] = df$fruit+df$veg
hist(df$fruitveg)
hist(df$fruitveg) # forma dos de mostrar histogrma de consumo de frutas y vegetales
table(df$smoking, exclude = NULL)
table(df$smoking) # Contar frecuencias por tipo de "smoking"
table(df$smoking, exclude = NULL)
table(df$smoking, exclude = NULL) # explicitar que se identifique los campos vacíod
table(df$smoking, exclude = NULL) # explicitar que se identifique los campos vacíos
df$five_a_day <- ifelse(df$fruitveg >= 5, 1, 0)
View(fruitveg)
View(df)
as.factor(df$five_a_day)
table(df$five_a_day)
table(df$five_a_day) # contar por tipo de "five_a_day"
hist(df$fruitveg, main="Consumo diario de frutas y vegetales combinados",
xlab = "Nñumero de porciones de frutas y vegetales",
ylab = "Frecuencia")
hist(df$fruitveg, main="Consumo diario de frutas y vegetales combinados",
xlab = "Número de porciones de frutas y vegetales",
ylab = "Frecuencia")
hist(df$fruitveg, main="Consumo diario de frutas y vegetales combinados",
xlab = "Número de porciones de frutas y vegetales consumidas por día",
ylab = "Frecuencia")
