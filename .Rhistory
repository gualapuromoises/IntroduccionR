akichwa=subset(df, City=="Ind.algunos")
acota=subset(df, City=="Cot.algunos")
agye=subset(df, City=="Gye.algunos")
auio=subset(df, City=="Uio.algunos")
wkichwa1=subset(df, City=="Ind.wakin1")
exp1=subset(df, ExpN=="1")
exp2= subset(df, ExpN=="2")
HighEdEc <-rbind(auio, agye)
Group2<-rbind(HighEdEc)
aind34<-subset(akichwa, Context=="3 out of 4")
wind34<-subset(wkichwa, Context=="3 out of 4")
wind44<-subset(wkichwa, Context=="4 out of 4")
rtws<- subset(wkichwa, Phon.Form=="stressed")
rtwns<- subset(wkichwa, Phon.Form=="nonstressed")
rtwns34<-subset(rtwns, Context=="3 out of 4")
aov1 <- aov(Context*Acceptance+Phon.Form, data = wkichwa)
# Summary of the analysis
summary(aov1)
#tukey.aov1<-TukeyHSD(aov1)
#tukey.aov1
names (df)
summary(df)
ggplot(df, x= "Context", y = "Age")
wkichwa=subset(df, City=="Ind.wakin")
akichwa=subset(df, City=="Ind.algunos")
acota=subset(df, City=="Cot.algunos")
agye=subset(df, City=="Gye.algunos")
auio=subset(df, City=="Uio.algunos")
wkichwa1=subset(df, City=="Ind.wakin1")
exp1=subset(df, ExpN=="1")
exp2= subset(df, ExpN=="2")
HighEdEc <-rbind(auio, agye)
Group2<-rbind(HighEdEc)
aind34<-subset(akichwa, Context=="3 out of 4")
wind34<-subset(wkichwa, Context=="3 out of 4")
wind44<-subset(wkichwa, Context=="4 out of 4")
rtws<- subset(wkichwa, Phon.Form=="stressed")
rtwns<- subset(wkichwa, Phon.Form=="nonstressed")
rtwns34<-subset(rtwns, Context=="3 out of 4")
df <- read.csv(file.choose())
names (df)
summary(df)
ggplot(df, x= "Context", y = "Age")
wkichwa=subset(df, City=="Ind.wakin")
akichwa=subset(df, City=="Ind.algunos")
acota=subset(df, City=="Cot.algunos")
agye=subset(df, City=="Gye.algunos")
auio=subset(df, City=="Uio.algunos")
wkichwa1=subset(df, City=="Ind.wakin1")
exp1=subset(df, ExpN=="1")
exp2= subset(df, ExpN=="2")
HighEdEc <-rbind(auio, agye)
Group2<-rbind(HighEdEc)
aind34<-subset(akichwa, Context=="3 out of 4")
wind34<-subset(wkichwa, Context=="3 out of 4")
wind44<-subset(wkichwa, Context=="4 out of 4")
rtws<- subset(wkichwa, Phon.Form=="stressed")
rtwns<- subset(wkichwa, Phon.Form=="nonstressed")
rtwns34<-subset(rtwns, Context=="3 out of 4")
aov1 <- aov(Context*Acceptance+Phon.Form, data = wkichwa)
# Summary of the analysis
summary(aov1)
#tukey.aov1<-TukeyHSD(aov1)
#tukey.aov1
aov1 <- aov(Context~Acceptance+Phon.Form, data = wkichwa)
# Summary of the analysis
summary(aov1)
#tukey.aov1<-TukeyHSD(aov1)
#tukey.aov1
wak = ctree(Acceptance~Context+RT, data=wkichwa)
plot(wak, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 2), main=" Education & Experiments ")
#waka = ctree(Acceptance~Context +Age+ Educ.Years + Lang.Use + Compu.Use,data=exp1)
#plot(waka, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 4), main="Experiment1 Data")
wak = ctree(Acceptance~Context+RT, data=wkichwa)
plot(wak, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 2), main=" Education & Experiments ")
waka = ctree(Acceptance~Context +Age+ Educ.Years + Lang.Use + Compu.Use,data=exp1)
plot(waka, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 4), main="Experiment1 Data")
wak = ctree(Acceptance~Context+RT, data=wkichwa)
plot(wak, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 2), main=" Education & Experiments ")
waka = ctree(Acceptance~Context +Age+ Educ.Years + Lang.Use + Compu.Use,data=exp1)
plot(waka, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 4), main="Experiment1 Data")
wak = ctree(Acceptance~Context+RT, data=wkichwa)
plot(wak, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 2), main=" Education & Experiments ")
waka = ctree(Acceptance~Context +Age+ Educ.Years + Lang.Use + Compu.Use,data=exp1)
plot(waka, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 4), main="Experiment1 Data")
wak = ctree(Acceptance~Context+RT, data=wkichwa)
plot(wak, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 2), main=" Education & Experiments ")
waka = ctree(Acceptance~Context +Age+ Educ.Years + Lang.Use + Compu.Use,data=wkichwa)
plot(waka, gp= gpar(fontsize=12), controls= ctree_control(maxsurrogate = 4), main="Experiment1 Data")
summary(results1 <-lmer(Acceptance~Context+Educ.Year+ (1|Participants),data=wkichwa))
summary(results2 <-lmer(Acceptance~Context+Educ.Years+RT+(1|Participants), data=wkichwa))
summary(results3 <-lmer(Acceptance~Context+Compu.Use+RT+Educ.Years+(1|Participants), data=wkichwa))
summary(results4 <-lmer(Acceptance~Context+Compu.Use+RT+Educ.Years+Age+(1|Participants), data=wkichwa))
anova(results1, results2, results3, results4)
results1 <-lmer(Acceptance~Context+Educ.Year+ (1|Participants),data=wkichwa)
results2 <-lmer(Acceptance~Context+Educ.Years+RT+(1|Participants), data=wkichwa)
results3 <-lmer(Acceptance~Context+Compu.Use+RT+Educ.Years+(1|Participants), data=wkichwa)
results4 <-lmer(Acceptance~Context+Compu.Use+RT+Educ.Years+Age+(1|Participants), data=wkichwa)
anova(results1, results2, results3, results4)
df <- read.csv(file.choose())
names (df)
summary(df)
type(df[])
type(names)
describe(df)
View(results2)
# Summary of the analysis
summary(aov1)
# Summary of the analysis
summary(aov1)
aov1 <- aov(Context~Acceptance+Phon.Form, data = wkichwa)
# Summary of the analysis
summary(aov1)
ggbarplot(wind34, x = "Phon.Form", y = "RT", add = "mean_se",color = "Context", palette = "Context", position = position_dodge(0.5))  + stat_compare_means(aes(group = Phon.Form), label = "p.format", label.y = 5)+facet_grid(.~Context) #+  geom_boxplot(outlier.shape=NA)
p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)
df <- ToothGrowth
p <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)
df <- ToothGrowth
p <- ggboxplot(df, x = "dose", y = "len",
color = "dose", palette =c("#00AFBB", "#E7B800", "#FC4E07"),
add = "jitter", shape = "dose")
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
stat_compare_means(label.y = 50)
View(df)
View(df)
install.packages("ggpubr")
install.packages("ggsignif", type="win.binary")
install.packages("ggpubr", type="win.binary")
install.packages("car")
install.packages("rstatix")
install.packages("ggpubr")
if(!require(devtools)) install.packages("devtools")
devtools::install_github("kassambara/ggpubr")
install.packages("devtools")
plot2
names (df)
str(df)
df1 <- df %>% select(RT, Acceptance, Educ.Years, Context, Compu.Use, Phon.Form) %>%filter(Phon.Form !="")
plot1 <- ggscatter(data = df1, x = "Educ.Years", y = "RT",
add = "reg.line", conf.int = TRUE, color = "Phon.Form",
cor.coef = TRUE, cor.method = "pearson", xlab = "Ed" , ylab = "Comm")
plot1
plot2 <- ggboxplot(df1, x = "Context", y = "RT",  add = "jitter",
palette = "jco", short.panel.labs = FALSE) +
facet_grid(.~Phon.Form)
plot2 + stat_compare_means(method = "anova", label =  "p.format", hide.ns = TRUE, label.x = 1.2) +
stat_compare_means(comparisons = list(c("3 out of 4", "4 out of 4")))
ggbarplot(ToothGrowth, x = "dose", y = "len", add = "mean_se",
color = "supp", palette = "jco",
position = position_dodge(0.8))+
stat_compare_means(aes(group = supp), label = "p.signif", label.y = 29)
library(phonR)
library(ggplot2)
library(lme4) #package mixed effect model code
library(lmerTest) #will add the p values
library(languageR)
library(lme4)
library(party)
library(randomForest)
library(Hmisc)
library(dplyr)
library(reshape2)
library(corrplot)
library(ggpubr)
library(ggplot2)
library(lazyeval)
library(PerformanceAnalytics)
names (df)
str(df)
df1 <- df %>% select(RT, Acceptance, Educ.Years, Context, Compu.Use, Phon.Form) %>%filter(Phon.Form !="")
plot1 <- ggscatter(data = df1, x = "Educ.Years", y = "RT",
add = "reg.line", conf.int = TRUE, color = "Phon.Form",
cor.coef = TRUE, cor.method = "pearson", xlab = "Ed" , ylab = "Comm")
plot1
plot2 <- ggboxplot(df1, x = "Context", y = "RT",  add = "jitter",
palette = "jco", short.panel.labs = FALSE) +
facet_grid(.~Phon.Form)
plot2 + stat_compare_means(method = "anova", label =  "p.format", hide.ns = TRUE, label.x = 1.2) +
stat_compare_means(comparisons = list(c("3 out of 4", "4 out of 4")))
ggbarplot(ToothGrowth, x = "dose", y = "len", add = "mean_se",
color = "supp", palette = "jco",
position = position_dodge(0.8))+
stat_compare_means(aes(group = supp), label = "p.signif", label.y = 29)
df <- read.csv(file.choose())
names (df)
str(df)
df1 <- df %>% select(RT, Acceptance, Educ.Years, Context, Compu.Use, Phon.Form) %>%filter(Phon.Form !="")
plot1 <- ggscatter(data = df1, x = "Educ.Years", y = "RT",
add = "reg.line", conf.int = TRUE, color = "Phon.Form",
cor.coef = TRUE, cor.method = "pearson", xlab = "Ed" , ylab = "Comm")
plot1
plot2 <- ggboxplot(df1, x = "Context", y = "RT",  add = "jitter",
palette = "jco", short.panel.labs = FALSE) +
facet_grid(.~Phon.Form)
plot2 + stat_compare_means(method = "anova", label =  "p.format", hide.ns = TRUE, label.x = 1.2) +
stat_compare_means(comparisons = list(c("3 out of 4", "4 out of 4")))
ggbarplot(ToothGrowth, x = "dose", y = "len", add = "mean_se",
color = "supp", palette = "jco",
position = position_dodge(0.8))+
stat_compare_means(aes(group = supp), label = "p.signif", label.y = 29)
plot2 + stat_compare_means(method = "anova", label =  "p.format", hide.ns = TRUE, label.x = 1.2)
plot2 <- ggboxplot(df1, x = "Context", y = "RT",  add = "jitter",
palette = "jco", short.panel.labs = FALSE, xlabel = "Context") +
facet_grid(.~Phon.Form)
plot2 + stat_compare_means(method = "anova", label =  "p.format", hide.ns = TRUE, label.x = 1.2)
plot2 <- ggboxplot(df1, x = "Context", y = "RT",  add = "jitter",
palette = "jco", short.panel.labs = FALSE,
xlabel = "Context", ylabel = "Reaction Time [mms]") +
facet_grid(.~Phon.Form)
plot2 + stat_compare_means(method = "anova", label =  "p.format", hide.ns = TRUE, label.x = 1.2)
library(KEGGREST)
library(stringr)
library(tidyverse)
library(dplyr)
library(purrr)
library(magrittr)
kegg <- function(enzima){
EC_KeggPathways= tryCatch(map(keggGet(enzima), extract, c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL)
return(EC_KeggPathways)
}
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
# Recuperación de información de la base de datos Kegg
system.time(sec1 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i]))) # elapsed
library(profvis)
profvis( sec2 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i])))
library(parallel)
detectCores(logical = FALSE) #cores fisicos
#
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
(tpar2<- system.time({par3 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)}))
library(parallel)
library(iterators)
library(foreach)
library(doParallel)
split = detectCores()
eachTree = 250
cl = makeCluster(split)
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100))) #windows, idem a lapply
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100), mc.cores = 2))# linux paralelizado
stopCluster(cl)
result
library(parallel)
library(iterators)
library(foreach)
library(doParallel)
split = detectCores()
eachTree = 250
cl = makeCluster(split)
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100))) #windows, idem a lapply
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100), mc.cores = 2))# linux paralelizado
stopCluster(cl)
kegg <- function(enzima){
EC_KeggPathways= tryCatch(map(keggGet(enzima), extract, c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL)
return(EC_KeggPathways)
}
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100))) #windows, idem a lapply
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100), mc.cores = 2))# linux paralelizado
library(parallel)
library(iterators)
library(foreach)
library(doParallel)
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100))) #windows, idem a lapply
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100), mc.cores = 2))# linux paralelizado
library(parallel)
library(iterators)
library(foreach)
library(doParallel)
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100))) #windows, idem a lapply
system.time(save2 <- mclapply(1:100, function(i) boot(data=df1,kegg, R=100), mc.cores = 2))# linux paralelizado
print(tpar2, "\n", tpar4, "\n", tpar6, "\n", tpar8, "\n", tpar10, "\n")
library(KEGGREST)
library(stringr)
library(tidyverse)
library(dplyr)
library(purrr)
library(magrittr)
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
kegg <- function(enzima){
EC_KeggPathways= tryCatch(map(keggGet(enzima), extract, c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL)
return(EC_KeggPathways)
}
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
# Recuperación de información de la base de datos Kegg
tsec1 <- system.time(sec1 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i]))) # elapsed
library(profvis)
profvis( sec2 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i])))
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
tpar2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
tpar4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
tpar6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
tpar8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
tpar10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
print("tsec1: ", tsec1, "\n 2: ",tpar2, "\n 4: ", tpar4, "\n 6: ", tpar6, "\n 8: ", tpar8, "\n 10: ", tpar10)
tsec1
print("tsec1: ", tsec1, "\n 2: ",tpar2, "\n 4: ", tpar4, "\n 6: ", tpar6, "\n 8: ", tpar8, "\n 10: ", tpar10)
print("tsec1: ")
tsec1
print("SECUENCIAL")
tsec1
print("SECUENCIAL", tsec1)
print("SECUENCIAL", tsec1)
"2: ",tpar2, "\n 4: ", tpar4, "\n 6: ", tpar6, "\n 8: ", tpar8, "\n 10: ", tpar10)
print("SECUENCIAL", tsec1)
tsec1
tsec1
tpar2
tpar4
tpar6
tpar8
tpar10
type(tsec1)
str(tsec1)
tsec1$user.self
tsec1.user.self
tsec1[.user.self]
tsec1[user.self]
tsec1[1]
cbind(tsec1, tpar2)
cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
times <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
plot(times)
ggplot(data=times, mapping = aes(x=user.self, y =tsec1))
ggplot(data=times)
str(times)
View(times)
ggplot(data=times)
ggplot(times)
str(times)
times <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
comptimes <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
str(comptimes)
ggplot(times)
plot(times)
comptimes <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)
str(comptimes)
comptimes
comptimes <- cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10).T
comptimes <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6, tpar8, tpar10)))
str(comptimes)
View(comptimes)
setDT(comptimes, keep.rownames = TRUE)[]
comptimes <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6,
tpar8, tpar10)))
setDT(comptimes, keep.rownames = TRUE)[]
df <- tibble::rownames_to_column(comptimes, "VALUE")
tiempos <- tibble::rownames_to_column(comptimes, "VALUE")
View(tiempos)
View(tiempos)
tiempos <- tibble::rownames_to_column(comptimes, "Tipo")
ggplot(tiempos, )
ggplot(tiempos, aes(x=tipo, y = elapsed))
tiempos <- tibble::rownames_to_column(comptimes, "tipo")
ggplot(tiempos, aes(x=tipo, y = elapsed))
ggplot(tiempos, aes(x=tipo, y = elapsed)) + geom_abline()
ggplot(tiempos) + geom_abline(aes(x=tipo, y = elapsed))
ggplot(tiempos, aes(x=tipo, y = elapsed)) + geom_point()
ggplot(tiempos, aes(x=factor(tipo), y = elapsed)) + geom_point()
library(KEGGREST)
library(stringr)
library(tidyverse)
library(dplyr)
library(purrr)
library(magrittr)
rm(list= ls()
kegg <- function(enzima){
rm(list= ls())
kegg <- function(enzima){
EC_KeggPathways= tryCatch(map(keggGet(enzima), extract, c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL)
return(EC_KeggPathways)
}
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE)
df1 <- df[1:10, ]
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
EC_unique <- unique (EC_records$EC_number)
# Recuperación de información de la base de datos Kegg
tsec1 <- system.time(sec1 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i]))) # elapsed
library(profvis)
profvis( sec2 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i])))
ggplot(tiempos, aes(tipo, elapsed) + geom_bar(stat="identity")
library(parallel)
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
tpar2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
tpar4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
tpar6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
tpar8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
tpar10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
comptimes <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6,
tpar8, tpar10)))
tiempos <- tibble::rownames_to_column(comptimes, "tipo")
ggplot(tiempos, aes(tipo, elapsed) + geom_bar(stat="identity")
tiempos <- as.data.frame(t(cbind(tsec1, tpar2, tpar4, tpar6,
tpar8, tpar10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
ggplot(tiempos, aes(tipo, elapsed)) + geom_bar(stat="identity")
View(tiempos)
tiempos$tipo <- factor(tiempos$tipo, levels = c("tsec1", "tpar2", "tpar4", "tpar6", "tpar8", "tpar10"))
ggplot(tiempos, aes(tipo, elapsed)) + geom_bar(stat="identity")
ggplot(tiempos, aes(tipo, c(elapsed, user.self, sys.self))) + geom_bar(stat="identity")
ggplot(tiempos, aes(x=tipo, y=c(elapsed, user.self, sys.self))) + geom_bar(stat="sta")
ggplot(tiempos, aes(x=tipo, y=c(elapsed, user.self, sys.self))) + geom_bar(stat="identity")
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity")
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge())
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=len), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=elapsed), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado (seg) por proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
# Recuperación de información de la base de datos Kegg
secuencial1 <- system.time(sec1 <- lapply(1:length(EC_unique), function(i) kegg(EC_unique[i]))) # elapsed
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
paralelo2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
paralelo4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
paralelo6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
paralelo8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
paralelo10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
tiempos$tipo <- factor(tiempos$tipo, levels = c("tsec1", "tpar2", "tpar4", "tpar6", "tpar8", "tpar10"))
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado (seg) por proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
tiempos$tipo <- factor(tiempos$tipo, levels = c("secuencial1", "paralelo2", "paralelo4", "paralelo6", "paralelo8", "paralelo10"))
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado (seg) por proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado por tipo de proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
library(parallel)
detectCores(logical = FALSE) #cores fisicos
RNGkind("L'Ecuyer-CMRG") #semillas aleatorias en los cores
clusters<- 2:10 # se evaluan de 2 a 10 clusters
paralelo2 <- system.time({par2 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 2, mc.set.seed = TRUE)})
paralelo4 <- system.time({par4 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 4, mc.set.seed = TRUE)})
paralelo6 <- system.time({par6 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 6, mc.set.seed = TRUE)})
paralelo8 <- system.time({par8 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 8, mc.set.seed = TRUE)})
paralelo10 <- system.time({par10 = mclapply(clusters, function(i) kegg(EC_unique[i]), mc.cores = 10, mc.set.seed = TRUE)})
tiempos <- as.data.frame(t(cbind(secuencial1, paralelo2, paralelo4, paralelo6, paralelo8, paralelo10)))
tiempos <- tibble::rownames_to_column(tiempos, "tipo")
tiempos$tipo <- factor(tiempos$tipo, levels = c("secuencial1", "paralelo2", "paralelo4", "paralelo6", "paralelo8", "paralelo10"))
ggplot(tiempos, aes(x=tipo, y=elapsed)) + geom_bar(stat="identity", position=position_dodge()) +
geom_text(aes(label=round(elapsed,2)), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5) +
labs(title="Tiempo demorado por tipo de proceso",
x ="Tipo de proceso", y = "Tiempo de proceso (seg)")
df <- read.csv("data1.txt", header = FALSE, sep = "\t",stringsAsFactors = FALSE) # data original
df1 <- df[1:10, ] # data demostrativa
# Crear códigos de enzimas compatibles con KEGG database
EC_records <- df1 %>% select(V3) %>% mutate(EC_number= paste0("EC: ", V3))
enzimas <- unique (EC_records$EC_number)
EC_KeggPathways <- vector("list",length(enzimas))
secuencia.tradicional <- system.time(for(i in 1:length(enzimas)){
KeggPathways[i]=tryCatch(map(keggGet(enzimas[i]), extract,
c("ENTRY", "NAME", "PATHWAY")), error=function(e) NULL) })
View(tiempos)
install.packages("rtweet")
library(lubridate)
library(tidyverse)
setwd("~/Documentos/2020II_R4Biol/PPTs")
